LABEL_DICT = {
    # basics
    'name': 'Name',
    'description': 'Description',
    'group': 'Group',
    'obj': 'Object',

    # config
    'condition': 'Condition match',
    'link': 'Condition link',
    'nested_group': 'Nested group',
    'condition_group': 'Condition',
    'script': 'Script',
    'script_arg': 'Script argument',
    'script_bin': 'Script binary',
    'reverse': 'Reverse action',
    'reverse_type': 'Reverse type',
    'reverse_type_data': 'Reverse after',
    'reverse_condition': 'Reverse condition',
    'reverse_script': 'Reverse script',
    'reverse_script_arg': 'Reverse script argument',
    'reverse_script_bin': 'Reverse script binary',
    'unit': 'Data unit',
    'datatype': 'Data type',
    'data': 'Data',
    'connection': 'Connection',
    'downlink': 'Downlink device',
    'value': 'Value',
    'operator': 'Operator',
    'check': 'Check type',
    'period': 'Period type',
    'period_data': 'Period',
    'period_function': 'Period function',
    'special_obj': 'Special match',

    # system
    'path_root': 'Core installation path',
    'path_home': 'Service-user home path',
    'path_log': 'Log path',
    'path_web': 'Webserver root path',
    'path_web_static': 'Webserver static-files directory',
    'sql_server': 'Database server',
    'sql_port': 'Database server port',
    'sql_user': 'Database user',
    'sql_secret': 'Database password',
    'sql_database': 'Database name',
    'sql_service': 'Database service',
    'sql_socket': 'Database socket (local database connection)',
    'sql_config': 'Database config file',
    'log_level': 'Log level',
    'security': 'Security mode',
    'timezone': 'Timezone',
    'debug': 'Debug mode',
    'timer': 'Timer',
    'web_cdn': 'Use CDN',
    'web_warn': 'Hide warnings',
    'device_fail_count': 'Device fail threshold',
    'device_fail_sleep': 'Device fail sleep time',
    'device_log': 'Device logs',
    'svc_interval_status': 'Status interval',
    'svc_interval_reload': 'Reload interval',
    'subprocess_timeout': 'Execution timeout',
    'version': 'System Version',
    'version_detail': 'Exact System Version',
    'ga_cloud': 'GrowAutomation Cloud Services',
    'ga_cloud_uuid': 'GrowAutomation Cloud ID',
    'ga_cloud_ddns': 'GrowAutomation Cloud Dynamic DNS',
    'letsencrypt': 'LetsEncrypt certificate provider',  # todo: add scripting to implement letsencrypt on running systems (after setup)

    # dashboard
    'chart_type': 'Chart type',
    'time_format_min': 'Time minute format',
    'time_format_hour': 'Time hour format',
    'time_format_day': 'Time day format',
    'time_format_month': 'Time month format',
    'chart_x_max_ticks': 'x-Axis max ticks',
    'chart_y_max_suggest': 'y-Axis max suggest',
    'options_json': 'Chart.js options in json format',
    'dataset_json': 'Chart.js dataset options in json format',
    'input_device': 'Input device',
    'input_obj': 'Input device',
    'input_model': 'Input device model',
    'input_group': 'Input device model',
    'area': 'Area',
    'start_ts': 'Start timestamp',
    'stop_ts': 'Stop timestamp',
    'chart_fill': 'Fill chart',
    'chart_fill_color': 'Chart fill color',
    'chart_border_color': 'Chart border color',
    'chart_border_width': 'Chart border width',
    'chart_point_radius': 'Chart point radius',
    'chart_point_color': 'Chart point color',
    'chart_point_type': 'Chart point type',

    # update
    'update_release': 'Release',
    'update_commit': 'Commit-ID (optional)',
    'update_path': 'Source Path',
}

HELP_DICT = {
    # basic
    'name': 'Name of the object or group [max length 50]',
    'description': 'Description of the object or group [can be empty, max length 255]',
    'group': 'Group to link',
    'obj': 'Object to link',

    # config
    'condition': 'Condition object to link',
    'link': 'Condition link to link to',
    'nested_group': 'Nested group to link',
    'condition_group': 'Condition to link',
    'script': 'Script to run for object [max length 50, can be empty if a downlink is used]',
    'script_arg': 'Script argument to pass when started [can be empty, max length 255]',
    'script_bin': 'Script binary to use to run the script [max length 100, can be empty if a downlink is used]',
    'reverse': 'If the action needs to be reversed actively',
    'reverse_type': 'How to reverse the action [can be empty]',
    'reverse_type_data': 'When to reverse the action [can be empty]',
    'reverse_condition': 'Condition that is evaluated to decide whether the action should be reversed [can be empty]',
    'reverse_script': 'Script to run when reversing the action (if empty -> the normal script will be run) [can be empty, max length 50]',
    'reverse_script_arg': 'Script argument to pass when reversing the action (if empty -> the normal script argument will be used) [can be empty, max length 255]',
    'reverse_script_bin': 'Script binary to use to run the script when reversing the action (if empty -> the normal script binary will be used) [can be empty, max length 100]',
    'unit': 'Unit of data (p.e. %, RH) [can be empty, max length 15]',
    'datatype': 'Type of data received from the input script [max length 50]',
    # 'data': 'Data',
    'connection': 'Connection port (p.e. GPIO or downlink pin) [max length 50]',
    'downlink': 'Downlink device (needed if p.e. analog to digital conversion is done via an intermediate device) [can be empty]',
    'value': 'Value to compare the input data to [max length 50]',
    'operator': 'Operator used for comparison',
    'check': 'Method used to calculate the comparison data from the datapool',
    'period': 'Method used to retrieve datapoints for the datapool',
    'period_data': 'Used in combination with the period type in the data retrieval process',
    'period_function': 'How to calculate the value of thinned-out data-points',
    'special_obj': 'Special condition match [can be empty]',
    'area': 'Area to filter devices on [can be empty]',
    'input_obj': 'Input device [can be empty]',
    'input_device': 'Input device [can be empty]',
    'input_group': 'Input device model [can be empty]',
    'input_model': 'Input device model [can be empty]',

    # system
    'path_root': 'Path to the core installation [max length 255]',
    'path_web': 'Path to the webserver root-directory [max length 255]',
    'path_web_static': 'Directory to save the webserver static-files in [max length 255]',
    'path_log': 'Directory to save the logs in [max length 255]',
    'path_home': 'Path to use as a home directory for the service-user [max length 255]',
    'sql_server': 'IP/Hostname of the database server (mariadb/mysql) that should be used [max length 50]',
    'sql_port': 'Database server port to connect to [1-65535]',
    'sql_user': 'Database user used for connecting to the sql server [max length 50]',
    'sql_secret': 'Password for the database user [max length 100]',
    'sql_database': 'Database that should be used [max length 50]',
    'sql_service': 'Name of the database systemd service [max length 50]',
    'sql_socket': 'Path to the database socket-file used to connect locally [max length 255]',
    'sql_config': 'Path to the database config-file  [max length 255]',
    'log_level': 'How detailed should the logs be?',
    'security': 'If the advanced security mode should be enabled',
    'timezone': 'Timezone used for conditions and core [max length 50]',
    'debug': 'If the debug mode should be enabled',
    'timer': 'Interval (in seconds) to execute the device script or system task',
    'interval': 'Custom interval in which to execute system task',
    'web_cdn': 'If the webinterface should use css and javascript files from content delivery networks; '
               'might speed-up loading times when accessing the website over the internet',
    'web_warn': 'If the webinterface should hide warnings',
    'device_fail_count': 'How often a device can fail (in a row) until it enters the fail-sleep time',
    'device_fail_sleep': 'How long a device should be ignored by the core after a recurring error was recognized',
    'device_log': 'If a per-device logfile should be created',
    'svc_interval_status': 'How often the core service should report its status (in seconds)',
    'svc_interval_reload': 'How often the core service should reload its config (in seconds)',
    'subprocess_timeout': 'The maximum time a device execution should be able to take (in seconds)',
    'version': 'Major version of this GrowAutomation System',
    'version_detail': 'Exact VCS version of this GrowAutomation System',
    'ga_cloud': 'If the use of GrowAutomation Cloud-Services should be enabled',
    'ga_cloud_uuid': 'This is the unique Cloud-ID of your system',
    'ga_cloud_ddns': 'If this system should register itself to the GrowAutomation DynDNS Service. For more information => see the documentation!',
    'letsencrypt': 'If the system uses letsencrypt as certificate provider',

    # dashboard
    'chart_type': 'Chart.js chart-type => DISCLAIMER: The GA config was only optimized for line charts',
    'time_format_min': 'Time format if the range is shown in minutes [must be valid moment.js format]',
    'time_format_hour': 'Time format if the range is shown in hours [must be valid moment.js format]',
    'time_format_day': 'Time format if the range is shown in days [must be valid moment.js format]',
    'time_format_month': 'Time format if the range is shown in months [must be valid moment.js format]',
    'chart_x_max_ticks': 'Maximum labels shown on x-Axis',
    'chart_y_max_suggest': 'y-Axis upper limit should start with this value (else dynamic) [can be empty]',
    'options_json': 'Chart.js options in json format (will replace all others) [max length 4096, can be empty]',
    'dataset_json': 'Chart.js dataset options in json format (will replace all others except the data itself) [max length 4096, can be empty]',
    'chart_fill': 'If the chart should be filled [can be empty]',
    'chart_fill_color': 'Color to fill the chart with [max length 50, can be empty]',
    'chart_border_color': 'Color of the chart border [max length 50, can be empty]',
    'chart_border_width': 'Width of the chart border [can be empty]',
    'chart_point_radius': 'Radius of chart data points [can be empty]',
    'chart_point_color': 'Color of chart data points [max length 50, can be empty]',
    'chart_point_type': 'Type of chart data points [can be empty]',
    'rows': 'How many rows there should be [max 100]',
    'columns': 'How many columns there should be [max 30]',

    # update
    'update_release': 'Choose a release-version to upgrade to.',
    'update_commit': 'Provide a specific commit-ID to upgrade to. If a commit is provided the update will ignore the release.',
    'update_path': "Local path to the source-code repository.",
}
