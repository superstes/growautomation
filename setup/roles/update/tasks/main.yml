---

- name: GA | Update | Preparing
  ansible.builtin.import_tasks: prep/main.yml

- name: GA | Update | Evaluating if update should be processed
  ansible.builtin.set_fact:
    ga_update_process: true
  when: |
    ga_update_release_new is version(ga_update_release_current, '>') or
    (ga_update_release_new == ga_update_release_current and ga_update_commit_new != ga_update_commit_current)

- name: GA | Update | Update should not be processed
  ansible.builtin.set_fact:
    ga_update_process: false
  when: ga_update_process is undefined

- name: GA | Update | Processing
  ansible.builtin.import_tasks: process/main.yml
  when: ga_update_process

- name: GA | Update | Updating version number
  ansible.builtin.shell: "echo \"{{ item }};\" | mysql --defaults-file={{ ga_update_path_web }}/{{ ga_db_config }} {{ ga_sql_db }}"
  with_items:
    - "update ga_systemagentmodel set version='{{ ga_update_release_new }}', version_detail='{{ ga_update_commit_new }}'"  # todo: once there is support for multiple agents we will need to target the update-cmd
    - "update ga_systemservermodel set version='{{ ga_update_release_new }}', version_detail='{{ ga_update_commit_new }}'"
  when:
    - not ga_update_failed
    - ga_update_process

- name: GA | Update | Restarting services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: restarted
  when: ga_update_process
  with_items:
    - 'ga_core.service'
    - 'apache2.service'

- ansible.builtin.debug:
    msg:
      - '################################################################################'
      - '################################################################################'
      - "GrowAutomation was successfully updated to version {{ ga_update_release_new }} - {{ ga_update_commit_new }}"
      - '################################################################################'
      - '################################################################################'
  when:
    - not ga_update_failed
    - ga_update_process

- ansible.builtin.debug:
    msg:
      - '################################################################################'
      - '################################################################################'
      - "GrowAutomation update WAS DISMISSED!"
      - "New version '{{ ga_update_release_new }}', current version '{{ ga_update_release_current }}'"
      - "New version-commit '{{ ga_update_commit_new }}', current version-commit '{{ ga_update_commit_current }}'"
      - '################################################################################'
      - '################################################################################'
  when:
    - not ga_update_failed
    - not ga_update_process

- ansible.builtin.debug:
    msg:
      - '################################################################################'
      - '################################################################################'
      - "GrowAutomation update to version {{ ga_update_release_new }} - {{ ga_update_commit_new }} FAILED!"
      - '################################################################################'
      - '################################################################################'
      - "Here's a way to restore GrowAutomation to its previous version (if you need it):"
      - "cd {{ ga_update_path_repo }}/setup"
      - "ansible-playbook pb_restore.yml  # provide the backup path: {{ ga_update_path_backup }}"
      - '################################################################################'
  when: ga_update_failed
