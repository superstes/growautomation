---

- name: GA | Core | Installing packages
  ansible.builtin.apt:
    name: "{{ ga_core_packages }}"
    state: present

- name: GA | Core | Setting system timezone
  community.general.timezone:
    name: "{{ ga_timezone }}"

- name: GA | Core | Adding service group
  ansible.builtin.group:
    name: "{{ ga_service_group }}"
    state: present

- name: GA | Core | Adding service user
  ansible.builtin.user:
    name: "{{ ga_core_service_user }}"
    shell: '/usr/sbin/nologin'
    home: "{{ ga_core_path_home }}"
    groups: "{{ ga_service_group }}"
    append: yes

- name: GA | Core | Creating core directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ ga_core_service_user }}"
    group: "{{ ga_service_group }}"
    mode: "{{ item.mode }}"
    recurse: yes
  loop:
  - {path: "{{ ga_core_path }}", mode: '0755'}
  - {path: "{{ ga_core_path_log }}", mode: '0775'}
  - {path: "{{ ga_core_path_venv }}", mode: '0750'}

- name: GA | Core | Copying core-code
  ansible.posix.synchronize:
    src: "{{ ga_setup_clone_dir }}/code/core"
    dest: "{{ ga_core_path }}/"
    recursive: yes
    rsync_path: 'sudo rsync'
    rsync_opts: ['--exclude=*.cnf', '--exclude=*.key', '--exclude=__pycache__/']

- name: GA | Core | Copying setup-scripts
  ansible.posix.synchronize:
    src: "{{ ga_setup_clone_dir }}/setup"
    dest: "{{ ga_core_path }}/"
    recursive: yes
    rsync_path: 'sudo rsync'

- name: GA | Core | Setting privileges for core code
  ansible.builtin.file:
    path: "{{ ga_core_path }}/core"
    state: directory
    owner: "{{ ga_core_service_user }}"
    group: "{{ ga_service_group }}"
    recurse: true
    mode: 0750

- name: GA | Core | Checking if random key file exists
  ansible.builtin.stat:
    path: "{{ ga_core_path }}/core/secret/random.key"
  register: random_key_file

- name: GA | Core | Generating random encryption key
  ansible.builtin.lineinfile:
    line: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=50') }}"
    path: "{{ ga_core_path }}/core/secret/random.key"
    state: present
    create: yes
    mode: 0440
    owner: "{{ ga_core_service_user }}"
    group: "{{ ga_service_group }}"
  no_log: true
  when: not random_key_file.stat.exists

- name: GA | Core | Setting privileges for encryption key
  ansible.builtin.file:
    path: "{{ ga_core_path }}/core/secret/random.key"
    owner: "{{ ga_core_service_user }}"
    group: "{{ ga_service_group }}"
    mode: 0440

- name: GA | Core | Adding core config file
  ansible.builtin.template:
    src: 'templates/var/lib/ga/core/config/file/core.conf.j2'
    dest: "{{ ga_core_path }}/core/config/file/core.conf"
    mode: 0600
    owner: "{{ ga_core_service_user }}"
    group: "{{ ga_service_group }}"

- name: GA | Core | Install python modules into venv
  ansible.builtin.pip:
    name: "{{ ga_core_mods }}"
    virtualenv: "{{ ga_core_path_venv }}"
    virtualenv_python: "python{{ ga_python_version }}"
    virtualenv_command: '/usr/bin/virtualenv'
    state: present

- name: GA | Core | Adding core service file
  ansible.builtin.template:
    src: 'templates/lib/systemd/system/ga_core.service.j2'
    dest: "/lib/systemd/system/{{ ga_core_service }}"

- name: GA | Core | Configuring update prerequisits
  ansible.builtin.import_tasks: update.yml

- name: GA | Core | Reloading systemd
  ansible.builtin.systemd:
    daemon_reload: yes

- name: GA | Core | Enabling service
  ansible.builtin.systemd:
    name: "{{ ga_core_service }}"
    enabled: yes

- name: GA | Configure device support
  ansible.builtin.import_tasks: devices.yml
  when: ga_core_device_support
