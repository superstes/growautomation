---

- name: GA | Web | Init | Copying user/group helpers
  ansible.builtin.copy:
    src: "files/tmp/{{ item }}"
    dest: '/tmp/{{ item }}'
    mode: 0500
  loop:
    - 'create_group.py'
    - 'create_user.py'
    - 'crypto.py'

- name: GA | Web | Init | Getting encrypted core-password
  ansible.builtin.command: "{{ ga_core_path_venv }}/bin/python3 /tmp/crypto.py encrypt {{ ga_sql_pwd_core | quote }}"
  environment:
    PYTHONPATH: "{{ ga_core_path }}"
  no_log: true
  register: ga_sql_pwd_core_encrypted

- name: GA | Web | Init | Getting encrypted web-password
  ansible.builtin.command: "{{ ga_core_path_venv }}/bin/python3 /tmp/crypto.py encrypt {{ ga_sql_pwd_web | quote }}"
  environment:
    PYTHONPATH: "{{ ga_core_path }}"
  no_log: true
  register: ga_sql_pwd_web_encrypted

- name: GA | Web | Init | Preparing initialization script
  ansible.builtin.set_fact:
    ga_db_init:  # This script is used to initialize the main configuration-objects - without those the core and web-interface won't work properly
      - "INSERT IGNORE INTO {{ ga_sql_db }}.ga_systemservermodel
        (created, updated, sql_secret, {% for setting in ga_settings.server.keys() %}{{ setting }}{% if not loop.last %}, {% endif %}{% endfor %})
        VALUES
        (NOW(), NOW(), '{{ ga_sql_pwd_web_encrypted.stdout }}',
        {% for value in ga_settings.server.values() %}
        {{ value }}{% if not loop.last %}, {% endif %}
        {% endfor %})"

      - "INSERT IGNORE INTO {{ ga_sql_db }}.ga_systemagentmodel
        (created, updated, sql_secret,
        {% for setting in ga_settings.agent.keys() %}
        {{ setting }}{% if not loop.last %}, {% endif %}
        {% endfor %})
        VALUES
        (NOW(), NOW(), '{{ ga_sql_pwd_core_encrypted.stdout }}', {% for value in ga_settings.agent.values() %}
        {{ value }}{% if not loop.last %}, {% endif %}
        {% endfor %})"

- name: GA | Web | Init | Executing database initialization script (local db)
  community.mysql.mysql_query:
    login_unix_socket: "{{ ga_sql_socket }}"
    login_db: "{{ ga_sql_db }}"
    config_file: "{{ ga_web_path }}/{{ ga_sql_config }}"
    query: "{{ ga_db_init }}"
    single_transaction: true
  when: ga_sql_server == 'localhost'
  register: init_script_local
  ignore_errors: true  # if executed more than once -> it will fail

- name: GA | Web | Init | Executing database initialization script (remote db)
  community.mysql.mysql_query:
    login_host: "{{ ga_sql_server }}"
    login_port: "{{ ga_sql_port }}"
    login_db: "{{ ga_sql_db }}"
    config_file: "{{ ga_web_path }}/{{ ga_sql_config }}"
    query: "{{ ga_db_init }}"
    single_transaction: true
  when: ga_sql_server != 'localhost'
  register: init_script_remote
  ignore_errors: true  # if executed more than once -> it will fail

- name: GA | Web | Init | Displaying info
  ansible.builtin.debug:
    msg: "INFO: The database initialization might fail if it was already run. In that case you can ignore this error!"
  when: >
    (init_script_local.failed is defined and init_script_local.failed) or
    (init_script_remote.failed is defined and init_script_remote.failed)

- name: GA | Web | Init | Creating ga groups
  ansible.builtin.shell: "source {{ ga_web_path_venv }}/bin/activate &&
  {{ ga_web_path_venv }}/bin/python3 /tmp/create_group.py {{ group | quote }}"
  args:
    executable: '/bin/bash'
    chdir: "{{ ga_web_path }}"
  environment:
    PYTHONPATH: "{{ ga_web_path }}:{{ ga_core_path }}:{{ ga_web_path_venv }}/lib/python{{ ga_python_version }}/site-packages"
    DJANGO_SETTINGS_MODULE: "{{ ga_web_django_project }}.settings"
  loop_control:
    loop_var: group
  loop: "{{ ga_django_groups }}"

- name: GA | Web | Init | Creating django admin
  ansible.builtin.shell: "source {{ ga_web_path_venv }}/bin/activate &&
  {{ ga_web_path_venv }}/bin/python3 /tmp/create_user.py {{ ga_django_superuser | quote }} {{ ga_sql_pwd_web | quote }} {{ ga_web_dns | quote }}
  \"ga_user,ga_read,ga_write,ga_admin\" 1"
  args:
    executable: '/bin/bash'
    chdir: "{{ ga_web_path }}"
  environment:
    PYTHONPATH: "{{ ga_web_path }}:{{ ga_core_path }}:{{ ga_web_path_venv }}/lib/python{{ ga_python_version }}/site-packages"
    DJANGO_SETTINGS_MODULE: "{{ ga_web_django_project }}.settings"
  no_log: true

- name: GA | Web | Init | Creating ga users
  ansible.builtin.shell: "source {{ ga_web_path_venv }}/bin/activate &&
  {{ ga_web_path_venv }}/bin/python3 /tmp/create_user.py {{ user.name | quote }} {{ user.pwd | quote }} {{ ga_web_dns | quote }}
  {% if user.access is defined and user.access == 'rw' %}\"ga_user,ga_read,ga_write\"{% else %}\"ga_user,ga_read\"{% endif %}"
  args:
    executable: '/bin/bash'
    chdir: "{{ ga_web_path }}"
  environment:
    PYTHONPATH: "{{ ga_web_path }}:{{ ga_core_path }}:{{ ga_web_path_venv }}/lib/python{{ ga_python_version }}/site-packages"
    DJANGO_SETTINGS_MODULE: "{{ ga_web_django_project }}.settings"
  loop_control:
    loop_var: user
  loop: "{{ ga_web_users }}"
  no_log: true

- name: GA | Web | Init | Restarting webserver
  ansible.builtin.systemd:
    name: 'apache2.service'
    state: restarted
    enabled: yes
